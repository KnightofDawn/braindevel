{
    templates: {
       cnt_shallow_square_avg:  !obj:braindecode.veganlasagne.layer_modifiers.$layer_modifier { 
        layers: [ 
           &in_layer !obj:lasagne.layers.InputLayer {
                shape: [null, in_sensors, $input_time_length, in_cols]
            },
            &shuffle !obj:lasagne.layers.DimshuffleLayer {
                incoming: *in_layer,
                pattern: [0,3,2,1],
            },
            &time_conv !obj:lasagne.layers.Conv2DLayer {
                incoming: *shuffle,
                num_filters: $num_filters,
                filter_size: [$filter_time_length, 1],
                nonlinearity: !!python/name:lasagne.nonlinearities.identity ,
                name: 'time_conv',
            },
            &spat_conv !obj:braindecode.veganlasagne.layers.Conv2DAllColsLayer {
                incoming: *time_conv,
                num_filters: $num_filters,
                filter_size: [1, -1],
                nonlinearity: !!python/name:lasagne.nonlinearities.identity ,
                name: 'spat_conv',
            },
            &batch_norm !obj:braindecode.veganlasagne.batch_norm.BatchNormLayer {
                incoming: *spat_conv,
                epsilon: 1e-4,
                alpha: $batch_norm_alpha,
                nonlinearity: !!python/name:theano.tensor.sqr ,
            },
            &pool !obj:braindecode.veganlasagne.pool.$pool_type {
                    incoming: *batch_norm,
                    pool_size: [$pool_time_length,1],
                    stride: [1,1],
                    mode: 'average_exc_pad',
            },
            &reshape_pool !obj:braindecode.veganlasagne.layers.StrideReshapeLayer {
                    incoming: *pool,
                    n_stride: $pool_time_stride,
            },
            &log !obj:lasagne.layers.NonlinearityLayer {
                    incoming: *reshape_pool,
                    nonlinearity: !!python/name:braindecode.veganlasagne.nonlinearities.safe_log ,
            },
            &drop_feature !obj:lasagne.layers.DropoutLayer {
                incoming: *log,
                p: 0.5,
            },
            &final_1_conv !obj:lasagne.layers.Conv2DLayer {
                incoming: *drop_feature,
                num_filters: $n_classes,
                filter_size: [1, 1],
                nonlinearity: !!python/name:lasagne.nonlinearities.identity ,
                name: 'final_dense',
            },
            &avg_pool !obj:braindecode.veganlasagne.pool.Pool2DLayer {
                incoming: *final_1_conv,
                pool_size: [$final_dense_length, 1],
                stride: [1,1],
                mode: 'average_exc_pad',
            },
            &final_reshape !obj:braindecode.veganlasagne.layers.FinalReshapeLayer {
                    incoming: *avg_pool,
            },
            &final_layer !obj:lasagne.layers.NonlinearityLayer {
                    incoming: *final_reshape,
                    nonlinearity: $final_nonlin ,
            },
        ]},
        layer_names_to_norms: {
            time_conv: 2.0,
            spat_conv: 2.0,
            final_dense: 0.5,
        },
        safe_softmax: !!python/name:braindecode.veganlasagne.nonlinearities.safe_softmax ,
    },
    variants: [[{
        layer_names_to_norms: [$layer_names_to_norms],
        layers: [$cnt_shallow_square_avg],
        final_nonlin: [$safe_softmax],
        n_classes: [4],
        pool_type: [Pool2DLayer],
        batch_norm_alpha: [0.1],
    }]]
}
