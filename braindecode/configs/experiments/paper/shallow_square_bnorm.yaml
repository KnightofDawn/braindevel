{
    templates: {
        cnt_shallow_square_bnorm_conv:  !obj:braindecode.veganlasagne.layer_modifiers.$layer_modifier { 
        layers: [ 
           &in_layer_a !obj:lasagne.layers.InputLayer {
                shape: [null, in_sensors, $input_time_length, in_cols]
            },
            &shuffle_a !obj:lasagne.layers.DimshuffleLayer {
                incoming: *in_layer_a,
                pattern: [0,3,2,1],
            },
            &time_conv_a !obj:lasagne.layers.Conv2DLayer {
                incoming: *shuffle_a,
                num_filters: $num_filters,
                filter_size: [$filter_time_length, 1],
                nonlinearity: !!python/name:lasagne.nonlinearities.identity ,
                name: 'time_conv',
            },
            &spat_conv_a !obj:braindecode.veganlasagne.layers.Conv2DAllColsLayer {
                incoming: *time_conv_a,
                num_filters: $num_filters,
                filter_size: [1, -1],
                nonlinearity: !!python/name:lasagne.nonlinearities.identity ,
                name: 'spat_conv',
            },
            &batch_norm_a !obj:braindecode.veganlasagne.batch_norm.BatchNormLayer {
                incoming: *spat_conv_a,
                epsilon: 1e-4,
                alpha: $batch_norm_alpha,
                nonlinearity: !!python/name:theano.tensor.sqr ,
            },
            &pool_a !obj:braindecode.veganlasagne.pool.$pool_type {
                    incoming: *batch_norm_a,
                    pool_size: [$pool_time_length,1],
                    stride: [1,1],
                    mode: 'average_exc_pad',
            },
            &reshape_pool_a !obj:braindecode.veganlasagne.layers.StrideReshapeLayer {
                    incoming: *pool_a,
                    n_stride: $pool_time_stride,
            },
            &log_a !obj:lasagne.layers.NonlinearityLayer {
                    incoming: *reshape_pool_a,
                    nonlinearity: $post_pool_nonlin,
            },
            &drop_feature_a !obj:lasagne.layers.DropoutLayer {
                incoming: *log_a,
                p: 0.5,
            },
            &final_dense_a !obj:lasagne.layers.Conv2DLayer {
                incoming: *drop_feature_a,
                num_filters: $n_classes,
                filter_size: [$final_dense_length, 1],
                nonlinearity: !!python/name:lasagne.nonlinearities.identity ,
                name: 'final_dense',
            },
            &final_reshape_a !obj:braindecode.veganlasagne.layers.FinalReshapeLayer {
                    incoming: *final_dense_a,
            },
            &final_layer_a !obj:lasagne.layers.NonlinearityLayer {
                    incoming: *final_reshape_a,
                    nonlinearity: $final_nonlin ,
            },
        ]},
        cnt_shallow_square_bnorm_square:  !obj:braindecode.veganlasagne.layer_modifiers.$layer_modifier { 
        layers: [ 
           &in_layer_b !obj:lasagne.layers.InputLayer {
                shape: [null, in_sensors, $input_time_length, in_cols]
            },
            &shuffle_b !obj:lasagne.layers.DimshuffleLayer {
                incoming: *in_layer_b,
                pattern: [0,3,2,1],
            },
            &time_conv_b !obj:lasagne.layers.Conv2DLayer {
                incoming: *shuffle_b,
                num_filters: $num_filters,
                filter_size: [$filter_time_length, 1],
                nonlinearity: !!python/name:lasagne.nonlinearities.identity ,
                name: 'time_conv',
            },
            &spat_conv_b !obj:braindecode.veganlasagne.layers.Conv2DAllColsLayer {
                incoming: *time_conv_b,
                num_filters: $num_filters,
                filter_size: [1, -1],
                nonlinearity: !!python/name:theano.tensor.sqr ,
                name: 'spat_conv',
            },
            &batch_norm_b !obj:braindecode.veganlasagne.batch_norm.BatchNormLayer {
                incoming: *spat_conv_b,
                epsilon: 1e-4,
                alpha: $batch_norm_alpha,
                nonlinearity: !!python/name:lasagne.nonlinearities.identity ,
            },
            &pool_b !obj:braindecode.veganlasagne.pool.$pool_type {
                    incoming: *batch_norm_b,
                    pool_size: [$pool_time_length,1],
                    stride: [1,1],
                    mode: 'average_exc_pad',
            },
            &reshape_pool_b !obj:braindecode.veganlasagne.layers.StrideReshapeLayer {
                    incoming: *pool_b,
                    n_stride: $pool_time_stride,
            },
            &log_b !obj:lasagne.layers.NonlinearityLayer {
                    incoming: *reshape_pool_b,
                    nonlinearity: $post_pool_nonlin,
            },
            &drop_feature_b !obj:lasagne.layers.DropoutLayer {
                incoming: *log_b,
                p: 0.5,
            },
            &final_dense_b !obj:lasagne.layers.Conv2DLayer {
                incoming: *drop_feature_b,
                num_filters: $n_classes,
                filter_size: [$final_dense_length, 1],
                nonlinearity: !!python/name:lasagne.nonlinearities.identity ,
                name: 'final_dense',
            },
            &final_reshape_b !obj:braindecode.veganlasagne.layers.FinalReshapeLayer {
                    incoming: *final_dense_b,
            },
            &final_layer_b !obj:lasagne.layers.NonlinearityLayer {
                    incoming: *final_reshape_b,
                    nonlinearity: $final_nonlin ,
            },
        ]},
        cnt_shallow_square_bnorm_pool:  !obj:braindecode.veganlasagne.layer_modifiers.$layer_modifier { 
        layers: [ 
           &in_layer_c !obj:lasagne.layers.InputLayer {
                shape: [null, in_sensors, $input_time_length, in_cols]
            },
            &shuffle_c !obj:lasagne.layers.DimshuffleLayer {
                incoming: *in_layer_c,
                pattern: [0,3,2,1],
            },
            &time_conv_c !obj:lasagne.layers.Conv2DLayer {
                incoming: *shuffle_c,
                num_filters: $num_filters,
                filter_size: [$filter_time_length, 1],
                nonlinearity: !!python/name:lasagne.nonlinearities.identity ,
                name: 'time_conv',
            },
            &spat_conv_c !obj:braindecode.veganlasagne.layers.Conv2DAllColsLayer {
                incoming: *time_conv_c,
                num_filters: $num_filters,
                filter_size: [1, -1],
                nonlinearity: !!python/name:theano.tensor.sqr ,
                name: 'spat_conv',
            },
            &pool_c !obj:braindecode.veganlasagne.pool.$pool_type {
                    incoming: *spat_conv_c,
                    pool_size: [$pool_time_length,1],
                    stride: [1,1],
                    mode: 'average_exc_pad',
            },
            &reshape_pool_c !obj:braindecode.veganlasagne.layers.StrideReshapeLayer {
                    incoming: *pool_c,
                    n_stride: $pool_time_stride,
            },
            &batch_norm_c !obj:braindecode.veganlasagne.batch_norm.BatchNormLayer {
                incoming: *reshape_pool_c,
                epsilon: 1e-4,
                alpha: $batch_norm_alpha,
                nonlinearity: !!python/name:lasagne.nonlinearities.identity ,
            },
            &log_c !obj:lasagne.layers.NonlinearityLayer {
                    incoming: *batch_norm_c,
                    nonlinearity: $post_pool_nonlin,
            },
            &drop_feature_c !obj:lasagne.layers.DropoutLayer {
                incoming: *log_c,
                p: 0.5,
            },
            &final_dense_c !obj:lasagne.layers.Conv2DLayer {
                incoming: *drop_feature_c,
                num_filters: $n_classes,
                filter_size: [$final_dense_length, 1],
                nonlinearity: !!python/name:lasagne.nonlinearities.identity ,
                name: 'final_dense',
            },
            &final_reshape_c !obj:braindecode.veganlasagne.layers.FinalReshapeLayer {
                    incoming: *final_dense_c,
            },
            &final_layer_c !obj:lasagne.layers.NonlinearityLayer {
                    incoming: *final_reshape_c,
                    nonlinearity: $final_nonlin ,
            },
        ]},
        layer_names_to_norms: {
            time_conv: 2.0,
            spat_conv: 2.0,
            final_dense: 0.5,
        },
        safe_softmax: !!python/name:braindecode.veganlasagne.nonlinearities.safe_softmax ,
        safe_log: !!python/name:braindecode.veganlasagne.nonlinearities.safe_log ,
        identity: !!python/name:lasagne.nonlinearities.identity ,
    },
    variants: [[{
        layer_names_to_norms: [$layer_names_to_norms],
        pool_time_length: [150],
        pool_time_stride: [30],
        final_nonlin: [$safe_softmax],
        n_classes: [4],
        pool_type: [Pool2DLayer],
        batch_norm_alpha: [0.1], 
    }]]
}
