{
    templates: {
        cnt_4l: !obj:braindecode.veganlasagne.layer_modifiers.$layer_modifier { 
        layers: [ 
           &in_layer !obj:lasagne.layers.InputLayer {
                shape: [null, in_sensors, $input_time_length, in_cols]
            },
            &shuffle !obj:lasagne.layers.DimshuffleLayer {
                incoming: *in_layer,
                pattern: [0,3,2,1],
            },
            &drop_in !obj:lasagne.layers.DropoutLayer {
                incoming: *shuffle,
                p: $drop_in_prob,
            },
            &time_conv !obj:lasagne.layers.Conv2DLayer {
                incoming: *drop_in,
                num_filters: $num_filters_time,
                filter_size: [$filter_time_length, 1],
                nonlinearity: !!python/name:lasagne.nonlinearities.identity ,
                name: 'time_conv',
            },
            &spat_conv !obj:braindecode.veganlasagne.layers.Conv2DAllColsLayer {
                incoming: *time_conv,
                num_filters: $num_filters_spat,
                filter_size: [1, -1],
                nonlinearity: !!python/name:lasagne.nonlinearities.identity ,
                name: 'spat_conv',
            },
            &batch_norm_1 !obj:braindecode.veganlasagne.batch_norm.BatchNormLayer {
                incoming: *spat_conv ,
                epsilon: 1e-4,
                alpha: $batch_norm_alpha,
                nonlinearity: $first_nonlin,
            },
            &pool !obj:braindecode.veganlasagne.pool.$first_pool_layer {
                    incoming: *batch_norm_1,
                    pool_size: [$pool_time_length,1],
                    stride: [1,1],
                    mode: $first_pool_mode,
            },
            &reshape_pool !obj:braindecode.veganlasagne.layers.StrideReshapeLayer {
                    incoming: *pool,
                    n_stride: $pool_time_stride,
            },
            &pool_nonlin_1 !obj:lasagne.layers.NonlinearityLayer {
                    incoming: *reshape_pool,
                    nonlinearity: $first_pool_nonlin ,
            },
            &drop_feature_1 !obj:lasagne.layers.DropoutLayer {
                incoming: *pool_nonlin_1,
                p: 0.5,
            },
            &combined_conv_2 !obj:lasagne.layers.Conv2DLayer {
                incoming: *drop_feature_1,
                num_filters: $num_filters_2,
                filter_size: [$filter_length_2, 1],
                nonlinearity: !!python/name:lasagne.nonlinearities.identity ,
                name: 'combined_conv_2',
            },
            &batch_norm_2 !obj:braindecode.veganlasagne.batch_norm.BatchNormLayer {
                incoming: *combined_conv_2 ,
                epsilon: 1e-4,
                alpha: $batch_norm_alpha,
                nonlinearity: $later_nonlin,
            },
            &pool_2 !obj:braindecode.veganlasagne.pool.$pool_layers {
                    incoming: *batch_norm_2,
                    pool_size: [$pool_time_length,1],
                    stride: [1,1],
                    mode: $later_pool_mode,
            },
            &reshape_pool_2 !obj:braindecode.veganlasagne.layers.StrideReshapeLayer {
                    incoming: *pool_2,
                    n_stride: $pool_time_stride,
            },
            &pool_nonlin_2 !obj:lasagne.layers.NonlinearityLayer {
                    incoming: *reshape_pool_2,
                    nonlinearity: $later_pool_nonlin ,
            },
            &drop_feature_2 !obj:lasagne.layers.DropoutLayer {
                incoming: *pool_nonlin_2,
                p: 0.5,
            },
            &combined_conv_3 !obj:lasagne.layers.Conv2DLayer {
                incoming: *drop_feature_2,
                num_filters: $num_filters_3,
                filter_size: [$filter_length_3, 1],
                nonlinearity: !!python/name:lasagne.nonlinearities.identity ,
                name: 'combined_conv_3',
            },
            &batch_norm_3 !obj:braindecode.veganlasagne.batch_norm.BatchNormLayer {
                incoming: *combined_conv_3 ,
                epsilon: 1e-4,
                alpha: $batch_norm_alpha,
                nonlinearity: $later_nonlin,
            },
            &pool_3 !obj:braindecode.veganlasagne.pool.$pool_layers {
                    incoming: *batch_norm_3,
                    pool_size: [$pool_time_length,1],
                    stride: [1,1],
                    mode: $later_pool_mode,
            },
            &reshape_pool_3 !obj:braindecode.veganlasagne.layers.StrideReshapeLayer {
                    incoming: *pool_3,
                    n_stride: $pool_time_stride,
            },
            &pool_nonlin_3 !obj:lasagne.layers.NonlinearityLayer {
                    incoming: *reshape_pool_3,
                    nonlinearity: $later_pool_nonlin ,
            },
            &drop_feature_3 !obj:lasagne.layers.DropoutLayer {
                incoming: *pool_nonlin_3,
                p: 0.5,
            },
            &combined_conv_4 !obj:lasagne.layers.Conv2DLayer {
                incoming: *drop_feature_3,
                num_filters: $num_filters_4,
                filter_size: [$filter_length_4, 1],
                nonlinearity: !!python/name:lasagne.nonlinearities.identity ,
                name: 'combined_conv_4',
            },
            &batch_norm_4 !obj:braindecode.veganlasagne.batch_norm.BatchNormLayer {
                incoming: *combined_conv_4 ,
                epsilon: 1e-4,
                alpha: $batch_norm_alpha,
                nonlinearity: $later_nonlin,
            },
            &pool_4 !obj:braindecode.veganlasagne.pool.$pool_layers {
                    incoming: *batch_norm_4,
                    pool_size: [$pool_time_length,1],
                    stride: [1,1],
                    mode: $later_pool_mode,
            },
            &reshape_pool_4 !obj:braindecode.veganlasagne.layers.StrideReshapeLayer {
                    incoming: *pool_4,
                    n_stride: $pool_time_stride,
            },
            &pool_nonlin_4 !obj:lasagne.layers.NonlinearityLayer {
                    incoming: *reshape_pool_4,
                    nonlinearity: $later_pool_nonlin ,
            },
            &drop_feature_4 !obj:lasagne.layers.DropoutLayer {
                incoming: *pool_nonlin_4,
                p: 0.5,
            },
            &final_dense !obj:lasagne.layers.Conv2DLayer {
                incoming: *drop_feature_4,
                num_filters: $n_classes,
                filter_size: [$final_dense_length, 1],
                nonlinearity: !!python/name:lasagne.nonlinearities.identity ,
                name: 'final_dense',
            },
            &final_reshape !obj:braindecode.veganlasagne.layers.FinalReshapeLayer {
                    incoming: *final_dense,
            },
            &final_sigmoid !obj:lasagne.layers.NonlinearityLayer {
                    incoming: *final_reshape,
                    nonlinearity: $final_nonlin ,
            },
        ]},
        layer_names_to_norms: {
            time_conv: $conv_norm,
            spat_conv: $conv_norm,
            combined_conv_2: $conv_norm,
            combined_conv_3: $conv_norm,
            combined_conv_4: $conv_norm,
            final_dense: $final_norm,
        },
        square: !!python/name:theano.tensor.sqr ,
        sigmoid: !!python/name:lasagne.nonlinearities.sigmoid ,
        identity: !!python/name:lasagne.nonlinearities.identity ,
        elu: !!python/name:lasagne.nonlinearities.elu ,
        relu: !!python/name:lasagne.nonlinearities.rectify ,
        leaky_relu: !!python/name:lasagne.nonlinearities.leaky_rectify ,
        safe_log: !!python/name:braindecode.veganlasagne.nonlinearities.safe_log ,
        safe_softmax: !!python/name:braindecode.veganlasagne.nonlinearities.safe_softmax ,
    },
    variants: [[{
        n_classes: [4],
        layer_names_to_norms: [$layer_names_to_norms],
        layers: [$cnt_4l],
        final_norm: [0.5],
        conv_norm: [2.0],
        first_nonlin: [$elu],
        later_nonlin: [$elu],
        final_nonlin: [$safe_softmax],
        first_pool_layer: [Pool2DLayer],
        first_pool_mode: ['max'], # just to prevent errors on square run, reenable
        first_pool_nonlin: [$identity],
        pool_layers: [Pool2DLayer],
        later_pool_mode: ['max'], # just to prevent errors on square run, reenable
        pool_time_length: [3],
        pool_time_stride: [3],
        later_pool_nonlin: [$identity],
        batch_norm_alpha: [0.1], 
    }]]
}
