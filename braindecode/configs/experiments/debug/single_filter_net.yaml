{
    templates: {
        simple_layers: [ 
           &in_layer !!python/object/apply:lasagne.layers.InputLayer {
                kwds: {
                    shape: [null, in_sensors, in_rows, in_cols]
                }
            },
            &conv !!python/object/apply:lasagne.layers.Conv2DLayer {
                kwds: {
                    incoming: *in_layer,
                    num_filters: 1,
                    filter_size: [100, 1],
                    nonlinearity: !!python/name:theano.tensor.sqr ,
                }
            },
            &pool !!python/object/apply:lasagne.layers.GlobalPoolLayer {
                kwds: {
                    incoming: *conv,
                    pool_function: !!python/name:theano.tensor.sum ,
                }
            },
            &log !!python/object/apply:lasagne.layers.NonlinearityLayer {
                kwds: {
                    incoming: *pool,
                    nonlinearity: !!python/name:theano.tensor.log ,
                }
            },
            &softmax !!python/object/apply:lasagne.layers.DenseLayer {
                kwds: {
                    incoming: *log,
                    num_units: 2,
                    nonlinearity: !!python/name:lasagne.nonlinearities.softmax ,
                }
            },
        ],
        raw_set: !!python/object/apply:braindecode.datasets.bbci_pylearn_dataset.BBCIPylearnCleanDataset {
            kwds: {
                filenames: 'data/BBCI-without-last-runs/MaJaMoSc1S001R01_ds10_1-11.BBCI.mat',
                cnt_preprocessors: [
                    [
                        !!python/name:braindecode.mywyrm.processing.highpass_cnt , 
                        {'low_cut_off_hz': 0.5}]
                    ],
                cleaner: !!python/object/apply:braindecode.mywyrm.clean.BBCISetNoCleaner { },
                load_sensor_names: ['CPz', 'CP1', 'CP2'],
                unsupervised_preprocessor: !!python/object/apply:braindecode.datasets.preprocessing.RestrictToTwoClasses {
                    kwds: {
                        classes: [0,2]
                    }
                }
            }
        },
    },
    variants: [[{
        save_path: ['data/models/faketest/'],
        layers: [$simple_layers],
        dataset: [$raw_set],
    }]]
}