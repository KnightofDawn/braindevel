{
    templates: {
        shallow_fbcsp_net: !obj:braindecode.models.shallow_fbcsp.ShallowFBCSPNet {
            in_chans: in_sensors, 
            input_time_length: $input_time_length, 
            filter_time_length: $s_filter_time_length,
            n_filters_time: $s_n_filters_time,
            n_filters_spat: $s_n_filters_spat,
            pool_time_length: $s_pool_time_length,
            pool_time_stride: $s_pool_time_stride,
            final_dense_length: $s_final_dense_length,
            conv_nonlin: $s_conv_nonlin,
            pool_mode: $s_pool_mode,
            pool_nonlin: $s_pool_nonlin,
            split_first_layer: $s_split_first_layer,
            batch_norm: $s_batch_norm,
            batch_norm_alpha: $batch_norm_alpha,
            drop_prob: $s_drop_prob,
            n_classes: $n_classes,
        },
       deep_5: !obj:braindecode.models.deep5.Deep5Net {
            in_chans: in_sensors, 
            input_time_length: $input_time_length, 
            drop_in_prob: $drop_in_prob,
            num_filters_time: $num_filters_time,
            filter_time_length: $filter_time_length,
            num_filters_spat: $num_filters_spat,
            batch_norm_alpha: $batch_norm_alpha,
            first_nonlin: $first_nonlin,
            pool_time_length: $pool_time_length,
            first_pool_mode: $first_pool_mode,
            pool_time_stride: $pool_time_stride,
            first_pool_nonlin: $first_pool_nonlin,
            drop_prob: $drop_prob,
            num_filters_2: $num_filters_2,
            filter_length_2: $filter_length_2,
            later_nonlin: $later_nonlin,
            later_pool_mode: $later_pool_mode,
            later_pool_nonlin: $later_pool_nonlin,
            num_filters_3: $num_filters_3,
            filter_length_3: $filter_length_3,
            num_filters_4: $num_filters_4,
            filter_length_4: $filter_length_4,
            final_dense_length: $final_dense_length,
            n_classes: $n_classes,
            final_nonlin: $final_nonlin,
            double_time_convs: $double_time_convs,
            batch_norm: $batch_norm,
            split_first_layer: $split_first_layer,
        },
        merged_net: !obj:braindecode.models.merged_net.MergedNet {
            networks: [$deep_5, $shallow_fbcsp_net],
            n_features_per_net: [$n_deep_features, $n_shallow_features],
            n_classes: $n_classes,
        },
        max_norm_modifier_with_defaults: !obj:braindecode.veganlasagne.update_modifiers.MaxNormConstraintWithDefaults {
            layer_names_to_norms: $layer_names_to_norms
        },
        safe_softmax: !!python/name:braindecode.veganlasagne.nonlinearities.safe_softmax ,
        identity: !!python/name:lasagne.nonlinearities.identity ,
        sigmoid: !!python/name:lasagne.nonlinearities.sigmoid ,
        elu: !!python/name:lasagne.nonlinearities.elu ,
        square: !!python/name:theano.tensor.sqr ,
        #sqrt: !!python/name:theano.tensor.sqrt ,
        elu_square: !!python/name:braindecode.veganlasagne.nonlinearities.elu_square ,
        safe_log: !!python/name:braindecode.veganlasagne.nonlinearities.safe_log ,
        safe_sqrt: !!python/name:braindecode.veganlasagne.nonlinearities.safe_sqrt ,
    },
    variants: [[{
        layers: [$merged_net],
        n_deep_features: [60],
        n_shallow_features: [40],

        updates_modifier: [$max_norm_modifier_with_defaults],
        
        final_nonlin: [$safe_softmax],
        n_classes: [4],
        layer_names_to_norms: [{}],
        s_filter_time_length: [28],
        s_n_filters_time: [30],
        s_n_filters_spat: [40],
        s_pool_time_length: [75],
        s_pool_time_stride: [15],
        s_final_dense_length: [29],
        s_conv_nonlin: [$square],
        s_pool_mode: ['average_exc_pad'],
        s_pool_nonlin: [$safe_log],
        s_split_first_layer: [True],
        s_batch_norm: [True],
        s_drop_prob: [0.5],
        
        drop_in_prob: [0.],
        num_filters_time: [20],
        num_filters_spat: [30],
        num_filters_2: [40],
        num_filters_3: [50],
        num_filters_4: [60],
        filter_time_length: [10],
        filter_length_2: [10],
        filter_length_3: [10],
        filter_length_4: [10],
        final_dense_length:  [2],
        
        split_first_layer: [True],
        batch_norm: [True],
        double_time_convs: [False],
        drop_prob: [0.5],
        n_classes: [4],
        layer_names_to_norms: [$layer_names_to_norms],
        layers: [$deep_5],
        final_norm: [0.5],
        conv_norm: [2.0],
        pool_time_length: [3],
        pool_time_stride: [3],
        first_nonlin: [$elu],
        first_pool_mode: ['max'], # just to prevent errors on square run, reenable
        first_pool_nonlin: [$identity],
        later_nonlin: [$elu],
        later_pool_mode: ['max'], # just to prevent errors on square run, reenable
        later_pool_nonlin: [$identity],
        batch_norm_alpha: [0.1], 
        final_nonlin: [$safe_softmax],
    }]]
}