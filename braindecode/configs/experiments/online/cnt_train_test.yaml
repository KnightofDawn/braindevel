{
    extends: [
        'configs/experiments/paper/ours/shallow.yaml',
        'configs/experiments/paper/cnt.yaml',
        ],
    templates: {
    cnt_shallow_square:  !obj:braindecode.veganlasagne.layer_modifiers.$layer_modifier { 
        layers: [ 
           &in_layer !obj:lasagne.layers.InputLayer {
                shape: [null, in_sensors, $input_time_length, in_cols]
            },
            &shuffle !obj:lasagne.layers.DimshuffleLayer {
                incoming: *in_layer,
                pattern: [0,3,2,1],
            },
            &time_conv !obj:lasagne.layers.Conv2DLayer {
                incoming: *shuffle,
                num_filters: $num_filters,
                filter_size: [$filter_time_length, 1],
                nonlinearity: !!python/name:lasagne.nonlinearities.identity ,
                name: 'time_conv',
            },
            &spat_conv !obj:braindecode.veganlasagne.layers.Conv2DAllColsLayer {
                incoming: *time_conv,
                num_filters: $num_filters,
                filter_size: [1, -1],
                nonlinearity: !!python/name:theano.tensor.sqr ,
                name: 'spat_conv',
            },
#            &batch_norm !obj:braindecode.veganlasagne.batch_norm.BatchNormLayer {
#                incoming: *spat_conv,
#                epsilon: 1e-4,
#                alpha: $batch_norm_alpha,
#                nonlinearity: !!python/name:theano.tensor.sqr ,
#            },
            &pool !obj:braindecode.veganlasagne.pool.$pool_type {
                    incoming: *spat_conv,
                    pool_size: [$pool_time_length,1],
                    stride: [1,1],
                    mode: 'average_exc_pad',
            },
            &reshape_pool !obj:braindecode.veganlasagne.layers.StrideReshapeLayer {
                    incoming: *pool,
                    n_stride: $pool_time_stride,
            },
            &log !obj:lasagne.layers.NonlinearityLayer {
                    incoming: *reshape_pool,
                    nonlinearity: !!python/name:braindecode.veganlasagne.nonlinearities.safe_log ,
            },
            &drop_feature !obj:lasagne.layers.DropoutLayer {
                incoming: *log,
                p: 0.5,
            },
            &final_dense !obj:lasagne.layers.Conv2DLayer {
                incoming: *drop_feature,
                num_filters: $n_classes,
                filter_size: [$final_dense_length, 1],
                nonlinearity: !!python/name:lasagne.nonlinearities.identity ,
                name: 'final_dense',
            },
            &final_reshape !obj:braindecode.veganlasagne.layers.FinalReshapeLayer {
                    incoming: *final_dense,
            },
            &final_layer !obj:lasagne.layers.NonlinearityLayer {
                    incoming: *final_reshape,
                    nonlinearity: $final_nonlin ,
            },
        ]},
        train_raw_set: !obj:braindecode.datasets.cnt_signal_matrix.CntSignalMatrix {
            signal_processor: !obj:braindecode.datasets.signal_processor.SignalProcessor {
                set_loader: !obj:braindecode.datasets.loaders.$train_loader_type {
                    filename: $dataset_filename,
                    load_sensor_names: $load_sensor_names,
                },
                segment_ival: [$trial_start, $trial_stop],
                cnt_preprocessors: $cnt_preprocessors,
                marker_def: $marker_def,
            },
            sensor_names: $sensor_names,
        },
        test_raw_set: !obj:braindecode.datasets.cnt_signal_matrix.CntSignalMatrix {
            signal_processor: !obj:braindecode.datasets.signal_processor.SignalProcessor {
                set_loader: !obj:braindecode.datasets.loaders.$test_loader_type {
                    filename: $test_filename,
                    load_sensor_names: $load_sensor_names,
                },
                segment_ival: [$trial_start, $trial_stop],
                cnt_preprocessors: $cnt_preprocessors,
                marker_def: $marker_def,
            },
            sensor_names: $sensor_names,
        },
        test_online_set: !obj:braindecode.datasets.cnt_signal_matrix.CntSignalMatrix {
            signal_processor: !obj:braindecode.datasets.signal_processor.SignalProcessor {
                set_loader: !obj:braindecode.datasets.loaders.HDF5StreamedSet {
                    filename: $online_dataset_filename,
                    load_sensor_names: $load_sensor_names,
                },
                segment_ival: [$trial_start, $trial_stop],
                cnt_preprocessors: $cnt_preprocessors,
                marker_def: $marker_def,
            },
            sensor_names: $sensor_names,
        },
        combined_set: !obj:braindecode.datasets.combined.CombinedSet {
        # raw set train defined in cnt.yaml file in paper folder
            sets: [$train_raw_set, $test_raw_set, $test_online_set],
        },
        dry_sensors: ['Fp1', 'Fpz', 'Fp2', 'AF7', 'AF3',
            'AFz', 'AF4', 'AF8', 'F5', 'F3', 'F1', 'Fz', 'F2', 'F4', 'F6',
            'FC1', 'FCz', 'FC2', 'C3', 'C1', 'Cz', 'C2', 'C4', 'CP3', 'CP1',
             'CPz', 'CP2', 'CP4', 'P1', 'Pz', 'P2', 'POz'],
    },
    variants: [[{
        resample_fs: [512],
        load_sensor_names: [$dry_sensors],
        sensor_names: ["null"],
        cleaner: [$no_cleaner],
        dataset: [$combined_set],
        online_dataset_filename: ['data/online/2016-01-07_17-25-32.hdf5'],
        save_path: ['data/models/online/cnt/shallow/'],
        low_cut_off_hz: ["null"],
        final_dense_length: [9],
        train_loader_type: [BBCIDataset],
        variants: [[
        {
            train_loader_type: [BBCIDataset],
            dataset_filename: ['data/four-sec-dry-32-sensors/MaVoMuSc_dryEEG32S003.BBCI.mat'],
            test_loader_type: [HDF5StreamedSet],
            test_filename: ['data/online/2016-01-07_17-15-35.hdf5'],
            
        },
        {
            trial_start: [2000],
            train_loader_type: [BBCIDataset],
            dataset_filename: ['data/four-sec-dry-32-sensors/MaVoMuSc_dryEEG32S001_2.BBCI.mat'],
            test_loader_type: [HDF5StreamedSet],
            test_filename: ['data/online/2016-01-07_17-15-35.hdf5'],
            
        },
        {
            trial_start: [2000],
            train_loader_type: [BBCIDataset],
            dataset_filename: ['data/four-sec-dry-32-sensors/MaVoMuSc_dryEEG32S001_2.BBCI.mat'],
            test_loader_type: [BBCIDataset],
            test_filename: ['data/four-sec-dry-32-sensors/MaVoMuSc_dryEEG32S003.BBCI.mat'],
            
        },
#        {
#            test_loader_type: [BBCIDataset],
#            test_filename: ['data/four-sec-dry-32-sensors/MaVoMuSc_dryEEG32S003.BBCI.mat'],
#        },
#        {
#            test_loader_type: [HDF5StreamedSet],
#            test_filename: ['data/online/2016-01-07_17-15-35.hdf5']
#        },
        ]],
        
        # DEBUG PARAMS
        batch_size: [60], # make it faster(?)
        trial_start: [1500],
        trial_stop: [4000],
        n_sample_preds: [500],
        pool_type: [SumPool2dLayer],
        input_time_length: [1050],
        layers: [$cnt_shallow_square],
        pool_time_length: [200],
        pool_time_stride: [40],
        filter_time_length: [30],
        use_test_as_valid: [False,True],
        max_increasing_epochs: [50],
        max_epochs: [250],
        # DEBUG PARAMS END
    }]],
}