 {
    extends: ['configs/experiments/defaults.yaml',
        'configs/experiments/raw_net_no_drop_time.yaml',
        'configs/experiments/4sec_movements/dry_32_sensors/filenames.yaml',
        'configs/experiments/4sec_movements/windows/windows.yaml'],
   templates: {
   
     shallow_square_layers: [ 
           &in_layer !obj:lasagne.layers.InputLayer {
                shape: [null, in_sensors, in_rows, in_cols]
            },
            &shuffle !obj:lasagne.layers.DimshuffleLayer {
                incoming: *in_layer,
                pattern: [0,3,2,1],
            },
            &time_conv !obj:lasagne.layers.Conv2DLayer {
                incoming: *shuffle,
                num_filters: $num_filters,
                filter_size: [$filter_time_length, 1],
                nonlinearity: !!python/name:lasagne.nonlinearities.identity ,
                name: 'time_conv',
            },
            &spat_conv !obj:braindecode.veganlasagne.layers.Conv2DAllColsLayer {
                incoming: *time_conv,
                num_filters: $num_filters,
                filter_size: [1, -1],
                nonlinearity: !!python/name:theano.tensor.sqr ,
                name: 'spat_conv',
            },
#            &batch_norm !obj:braindecode.veganlasagne.batch_norm.BatchNormLayer {
#                incoming: *spat_conv,
#                epsilon: 1e-4,
#                alpha: $batch_norm_alpha,
#                nonlinearity: !!python/name:theano.tensor.sqr ,
#            },
            &pool !obj:braindecode.veganlasagne.pool.$pool_type {
                    incoming: *spat_conv,
                    pool_size: [$pool_time_length,1],
                    stride: [$pool_time_stride,1],
                    mode: 'average_exc_pad',
            },
            &log !obj:lasagne.layers.NonlinearityLayer {
                    incoming: *pool,
                    nonlinearity: !!python/name:braindecode.veganlasagne.nonlinearities.safe_log ,
            },
            &drop_feature !obj:lasagne.layers.DropoutLayer {
                incoming: *log,
                p: 0.5,
            },
            &final_dense !obj:lasagne.layers.DenseLayer {
                incoming: *drop_feature,
                num_units: $n_classes,
                nonlinearity: !!python/name:lasagne.nonlinearities.softmax ,
                name: 'final_dense',
            },
        ],
   
      cnt_standardize:  [[
            !!python/name:braindecode.mywyrm.processing.exponential_standardize_cnt , 
            {},
        ],
        ],
        
        test_raw_set: !obj:braindecode.datasets.raw.CleanSignalMatrix {
            signal_processor: !obj:braindecode.datasets.signal_processor.SignalProcessor {
                set_loader: !obj:braindecode.datasets.loaders.$loader_type {
                    filename: $test_dataset_filename,
                    load_sensor_names: $load_sensor_names,
                },
                segment_ival: [$trial_start, $trial_stop],
                cnt_preprocessors: $cnt_preprocessors,
                marker_def: $marker_def,
            },
            cleaner: $cleaner,
            sensor_names: $sensor_names,
        },
        test_online_set: !obj:braindecode.datasets.raw.CleanSignalMatrix {
            signal_processor: !obj:braindecode.datasets.signal_processor.SignalProcessor {
                set_loader: !obj:braindecode.datasets.loaders.HDF5StreamedSet {
                    filename: $online_dataset_filename,
                    load_sensor_names: $load_sensor_names,
                },
                segment_ival: [$trial_start, $trial_stop],
                cnt_preprocessors: $cnt_preprocessors,
                marker_def: $marker_def,
            },
            cleaner: $cleaner,
            sensor_names: $sensor_names,
        },
        combined_set: !obj:braindecode.datasets.combined.CombinedSet {
            sets: [$raw_set, $test_raw_set, $test_online_set],
        },
        several_sets_splitter: !obj:braindecode.datahandling.splitters.SeveralSetsSplitter {
            use_test_as_valid: $use_test_as_valid,
        },
   }, 
    variants: [[
    {
        use_test_as_valid: [false],
        dataset: [$combined_set],
        dataset_splitter: [$several_sets_splitter],
        test_dataset_filename: ['data/four-sec-dry-32-sensors/MaVoMuSc_dryEEG32S003.BBCI.mat'],
        online_dataset_filename: ['data/online/2016-01-07_17-25-32.hdf5'],
        low_cut_off_hz: [0.5],
        n_samples_per_window: [512],
        n_sample_stride: [50],
        save_path: ['data/models/4sec-movements/windows/dry-32-sensors/train-test-online/'],
        sensor_names: ["null"],
        cnt_preprocessors: [$cnt_standardize],
        filter_time_length: [40],
        pool_time_length: [200],
        pool_time_stride: [40],
        max_increasing_epochs: [50],
        max_epochs: [100],
        preprocessor: ["null"],
        
        # DEBUG
        #pool_time_length: [150],
        #pool_time_stride: [30],
        batch_norm_alpha: [0.1],
        pool_type: [Pool2DLayer],
        layers: [$shallow_square_layers],
    }
    ]]
}
