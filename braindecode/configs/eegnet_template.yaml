 {
        layers: $layers,
        C_sensors: &C_sensors ['FC5', 'FC1', 'FC2', 'FC6', 'C3', 'Cz', 'C4', 'CP5',
            'CP1', 'CP2', 'CP6', 'FC3', 'FCz', 'FC4', 'C5', 'C1', 'C2', 'C6',
            'CP3', 'CPz', 'CP4', 'FFC5h', 'FFC3h', 'FFC4h', 'FFC6h', 'FCC5h',
            'FCC3h', 'FCC4h', 'FCC6h', 'CCP5h', 'CCP3h', 'CCP4h', 'CCP6h', 'CPP5h',
            'CPP3h', 'CPP4h', 'CPP6h', 'FFC1h', 'FFC2h', 'FCC1h', 'FCC2h', 'CCP1h',
             'CCP2h', 'CPP1h', 'CPP2h'],
        original_params: $original_params,
        save_path: $save_path,
        dataset: &dataset $dataset,
        preprocessor: &preprocessor $preprocessor,
        preprocessed_provider: &preprocessed_provider !obj:braindecode.datasets.dataset_splitters.PreprocessedSplitter {
            dataset_splitter: !obj:braindecode.datasets.dataset_splitters.DatasetSingleFoldSplitter {
                dataset: *dataset, 
                num_folds: 10, 
                test_fold_nr: 9,
            },
            preprocessor: *preprocessor,
        },
        dataset_provider: $dataset_provider,
        exp_args: {
            loss_var_func: $loss_var_func,
            updates_var_func: $updates_var_func,
            batch_iter_func: !!python/name:braindecode.datasets.batch_iteration.get_balanced_batches ,
            monitors: [
                !obj:braindecode.veganlasagne.monitors.LossMonitor {},
                !obj:braindecode.veganlasagne.monitors.MisclassMonitor {},
                !obj:braindecode.veganlasagne.monitors.RuntimeMonitor {},
            ],
            stop_criterion: !obj:braindecode.veganlasagne.stopping.Or {
                stopping_criteria: [
                    !obj:braindecode.veganlasagne.stopping.NoDecrease {
                        chan_name: valid_misclass,
                        num_epochs: $max_increasing_epochs,
                        min_decrease: 0.,
                    },
                    !obj:braindecode.veganlasagne.stopping.MaxEpochs {
                        num_epochs: $max_epochs,
                    },
                ]
            },
        },
}
