{
    extends: [
        'configs/experiments/paper/ours/shallow.yaml',
        'configs/experiments/paper/cnt.yaml',
        ],
    templates: {
        resample_car_highpass_standardize: 
        [[
                !!python/name:braindevel.mywyrm.processing.resample_cnt ,
                {'newfs': $resample_fs},
            ],[
                !!python/name:braindevel.mywyrm.processing.common_average_reference_cnt ,
                {}
        ],
            [
                !!python/name:braindevel.mywyrm.processing.highpass_cnt ,
                {'low_cut_off_hz': $low_cut_off_hz}
        ],
            [
                !!python/name:braindevel.mywyrm.processing.exponential_standardize_cnt ,
                { }
        ]],
        resample_cz_car_highpass_standardize: 
        [[
                !!python/name:braindevel.mywyrm.processing.resample_cnt ,
                {'newfs': $resample_fs},
            ],[
                !!python/name:braindevel.mywyrm.processing.rereference_to ,
                {sensor_name: 'Cz'}
        ],[
                !!python/name:braindevel.mywyrm.processing.common_average_reference_cnt ,
                {}
        ],
            [
                !!python/name:braindevel.mywyrm.processing.highpass_cnt ,
                {'low_cut_off_hz': $low_cut_off_hz}
        ],
            [
                !!python/name:braindevel.mywyrm.processing.exponential_standardize_cnt ,
                { }
        ]],
        resample_cz_highpass_standardize: 
        [[
                !!python/name:braindevel.mywyrm.processing.resample_cnt ,
                {'newfs': $resample_fs},
            ],[
                !!python/name:braindevel.mywyrm.processing.rereference_to ,
                {sensor_name: 'Cz'}
        ],
            [
                !!python/name:braindevel.mywyrm.processing.highpass_cnt ,
                {'low_cut_off_hz': $low_cut_off_hz}
        ],
            [
                !!python/name:braindevel.mywyrm.processing.exponential_standardize_cnt ,
                { }
        ],
            ],
        resample_bandpass_cz_standardize: 
        [[
                !!python/name:braindevel.mywyrm.processing.resample_cnt ,
                {'newfs': $resample_fs},
            ],
            
            [
                !!python/name:braindevel.mywyrm.processing.bandpass_cnt ,
                {'low_cut_hz': $low_cut_off_hz,
                'high_cut_hz': $high_cut_hz}
        ],
            [
                !!python/name:braindevel.mywyrm.processing.rereference_to ,
                {sensor_name: 'Cz'}
        ],
            [
                !!python/name:braindevel.mywyrm.processing.exponential_standardize_cnt ,
                { }
        ],
            ],
        resample_cz_bandpass_standardize: 
        [[
                !!python/name:braindevel.mywyrm.processing.resample_cnt ,
                {'newfs': $resample_fs},
            ],
            [
                !!python/name:braindevel.mywyrm.processing.rereference_to ,
                {sensor_name: 'Cz'}
        ],
            
            [
                !!python/name:braindevel.mywyrm.processing.bandpass_cnt ,
                {'low_cut_hz': $low_cut_off_hz,
                'high_cut_hz': $high_cut_hz}
        ],
            [
                !!python/name:braindevel.mywyrm.processing.exponential_standardize_cnt ,
                { }
        ],
            ],
        resample_cz_highpass_demean: 
        [[
                !!python/name:braindevel.mywyrm.processing.resample_cnt ,
                {'newfs': $resample_fs},
            ],[
                !!python/name:braindevel.mywyrm.processing.rereference_to ,
                {sensor_name: 'Cz'}
        ],
            [
                !!python/name:braindevel.mywyrm.processing.highpass_cnt ,
                {'low_cut_off_hz': $low_cut_off_hz}
        ],
            [
                !!python/name:braindevel.mywyrm.processing.exponential_demean_cnt ,
                { }
        ],
            ],
        resample_cz: 
        [[
                !!python/name:braindevel.mywyrm.processing.resample_cnt ,
                {'newfs': $resample_fs},
            ],[
                !!python/name:braindevel.mywyrm.processing.rereference_to ,
                {sensor_name: 'Cz'}
        ],
            ],
    cnt_shallow_square:  !obj:braindevel.veganlasagne.layer_modifiers.$layer_modifier {
        layers: [ 
           &in_layer !obj:lasagne.layers.InputLayer {
                shape: [null, in_sensors, $input_time_length, in_cols]
            },
            &shuffle !obj:lasagne.layers.DimshuffleLayer {
                incoming: *in_layer,
                pattern: [0,3,2,1],
            },
            &time_conv !obj:lasagne.layers.Conv2DLayer {
                incoming: *shuffle,
                num_filters: $num_filters,
                filter_size: [$filter_time_length, 1],
                nonlinearity: !!python/name:lasagne.nonlinearities.identity ,
                name: 'time_conv',
            },
            &spat_conv !obj:braindevel.veganlasagne.layers.Conv2DAllColsLayer {
                incoming: *time_conv,
                num_filters: $num_filters,
                filter_size: [1, -1],
                nonlinearity: !!python/name:theano.tensor.sqr ,
                name: 'spat_conv',
            },
            &batch_norm !obj:braindevel.veganlasagne.batch_norm.BatchNormLayer {
                incoming: *spat_conv,
                epsilon: 1e-4,
                alpha: $batch_norm_alpha,
                nonlinearity: !!python/name:theano.tensor.sqr ,
            },
            &pool !obj:braindevel.veganlasagne.pool.$pool_type {
                    incoming: *batch_norm,
                    pool_size: [$pool_time_length,1],
                    stride: [1,1],
                    mode: 'average_exc_pad',
            },
            &reshape_pool !obj:braindevel.veganlasagne.layers.StrideReshapeLayer {
                    incoming: *pool,
                    n_stride: $pool_time_stride,
            },
            &log !obj:lasagne.layers.NonlinearityLayer {
                    incoming: *reshape_pool,
                    nonlinearity: !!python/name:braindevel.veganlasagne.nonlinearities.safe_log ,
            },
            &drop_feature !obj:lasagne.layers.DropoutLayer {
                incoming: *log,
                p: 0.5,
            },
            &final_dense !obj:lasagne.layers.Conv2DLayer {
                incoming: *drop_feature,
                num_filters: $n_classes,
                filter_size: [$final_dense_length, 1],
                nonlinearity: !!python/name:lasagne.nonlinearities.identity ,
                name: 'final_dense',
            },
            &final_reshape !obj:braindevel.veganlasagne.layers.FinalReshapeLayer {
                    incoming: *final_dense,
            },
            &final_layer !obj:lasagne.layers.NonlinearityLayer {
                    incoming: *final_reshape,
                    nonlinearity: $final_nonlin ,
            },
        ]},
        combined_cnt_set: !obj:braindevel.datasets.combined.CombinedCntSets {
            set_args: !!python/object/apply:zip [
                $filenames, $set_types, 
                $trial_ranges, $all_segment_ivals, $end_marker_defs],
            load_sensor_names: $load_sensor_names,
            sensor_names: $sensor_names,
            marker_def: $marker_def,
            cnt_preprocessors: $cnt_preprocessors,
        },
                
        
        dry_sensors: ['Fp1', 'Fpz', 'Fp2', 'AF7', 'AF3',
            'AFz', 'AF4', 'AF8', 'F5', 'F3', 'F1', 'Fz', 'F2', 'F4', 'F6',
            'FC1', 'FCz', 'FC2', 'C3', 'C1', 'Cz', 'C2', 'C4', 'CP3', 'CP1',
             'CPz', 'CP2', 'CP4', 'P1', 'Pz', 'P2', 'POz'],
        end_markers_4_class: {'1': [5], '2': [6], '3': [7], '4': [8]},
        tied_neighbours: !obj:braindevel.util.FuncAndArgs {
            func: !!python/name:braindevel.veganlasagne.objectives.sum_of_losses ,
            loss_expressions: [$categorical_crossentropy,
                !!python/name:braindevel.veganlasagne.objectives.tied_neighbours_cnt_model ,
            ]
        },
    },
    variants: [[{ 
        # Remove from params basically..
        first_nonlin: [$square],
        post_pool_nonlin: [$safe_log],
        test_filename: ["null"], # remove this from params basically.. its coming from base filenames :)
        dataset_splitter: [$several_sets_splitter],
        dataset_filename: ['null'], # remove this from params basically.. its coming from base filenames :)
        pool_mode: ['average_exc_pad'],
        #loss_expression: [$categorical_crossentropy],
        valid_set_fraction: [0.2],
        cnt_preprocessors: [$resample_bandpass_cz_standardize],
        resample_fs: [500],
        load_sensor_names: [$dry_sensors],
        sensor_names: ["null"],
        cleaner: [$no_cleaner],
        dataset: [$combined_cnt_set],
        save_path: ['data/models/online/cnt/shallow-uneven-trials/'],
        low_cut_off_hz: [4],
        high_cut_hz: [90],
        filter_time_length: [50],
        pool_time_stride: [40],
        pool_time_length: [200],
        final_dense_length: [5],
        train_loader_type: [BBCIDataset],
        num_filters: [40],
        run_after_early_stop: [true],
        
        
        filenames: [[
            'data/BBCI-all-runs/MaVoMoSc1S001R01_ds10_1-13BBCI.mat',
            'data/four-sec-dry-32-sensors/cabin/Martin_trainingS001R01_1-4.BBCI.mat',
            'data/four-sec-dry-32-sensors/cabin/Martin_sahara32_realMovementS001R01_ds10_1-7.BBCI.mat',
            'data/four-sec-dry-32-sensors/cabin/MaVo2_sahara32_realMovementS001R02_ds10_1-5.BBCI.mat',
            'data/four-sec-dry-32-sensors/cabin/MaVo_sahara32_realMovement_onlineFeedback_20160315S001R01_1-9.BBCI.mat',
            'data/four-sec-dry-32-sensors/cabin/MaVo_sahara32_realMovement_onlineFeedback_20160407S001R01_1-5.BBCI.mat'
            ]],
        set_types: [[
        'bbci',
        'bbci',
        'bbci',
        'bbci',
        'bbci',
        'bbci',
        ]],
        
        trial_ranges: ["[
           [0, 300],
           [0,null],
           [0,null],
           [0,null],
           [0,null],
           [0,null],
        ]"],
        
        all_segment_ivals: [[
            [1000,4000],
            [1000,4000],
            [500,0],
            [500,0],
            [0,0],
            [0,0],
        ],
        ],
        end_marker_defs: ["[
            null,
            null,
            {'1': [5], '2': [6], '3': [7], '4': [8]},
            {'1': [5], '2': [6], '3': [7], '4': [8]},
            {'1': [5], '2': [6], '3': [7], '4': [8]},
            {'1': [5], '2': [6], '3': [7], '4': [8]},
        ]"],
        
        batch_size: [60], # make it faster(?)
        n_sample_preds: [200], # will be overwritten anyways
        pool_type: [SumPool2dLayer],
        input_time_length: [600],
        layers: [$cnt_shallow_square],
        use_test_as_valid: [False], # False
        max_increasing_epochs: [40],
        max_epochs: [30],#250],
        ignore_unused: [['max_min', 'drop_p', 'whisker_length', 'test_cleaner',
         'test_filename', 'cleaner', 'post_pool_nonlin', 'loader_type', 
         'train_loader_type', 'eog_sensors', 'dataset_filename',      
         'rejection_var_ival', 'rejection_blink_ival', 'train_cleaner',
         'num_split_folds', 'misclass_monitor', 'first_nonlin',
          'whisker_percent', 'pool_mode', 'i_test_fold',
          'max_abs_threshold', 'trial_stop', 'trial_start', 'rejection_max_abs_ival']]
        
    }]],
}