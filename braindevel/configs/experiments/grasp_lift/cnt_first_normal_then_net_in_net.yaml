{
    templates: {
        cnt_raw_net_deep_batch_norm: [ 
           &in_layer !obj:lasagne.layers.InputLayer {
                shape: [null, in_sensors, $input_time_length, in_cols]
            },
            &combined_conv_1 !obj:lasagne.layers.Conv2DLayer {
                incoming: *in_layer,
                num_filters: $num_filters,
                filter_size: [$filter_time_length, 1],
                nonlinearity: !!python/name:lasagne.nonlinearities.identity ,
                name: 'combined_conv_1',
            },
            &batch_norm_1 !obj:braindevel.veganlasagne.batch_norm.BatchNormLayer {
                incoming: *combined_conv_1,
                epsilon: 1e-4,
                alpha: $batch_norm_alpha,
            },
            &pool !obj:braindevel.veganlasagne.pool.$first_pool_layer {
                    incoming: *batch_norm_1,
                    pool_size: [$pool_time_length,1],
                    stride: [1,1],
                    mode: $first_pool_mode,
            },
            &reshape_pool !obj:braindevel.veganlasagne.layers.StrideReshapeLayer {
                    incoming: *pool,
                    n_stride: $pool_time_stride,
            },
            &log_1 !obj:lasagne.layers.NonlinearityLayer {
                    incoming: *reshape_pool,
                    nonlinearity: $first_pool_nonlin ,
            },
            &drop_feature_1 !obj:lasagne.layers.DropoutLayer {
                incoming: *log_1,
                p: 0.5,
            },
            &filt_conv_2 !obj:lasagne.layers.Conv2DLayer {
                incoming: *drop_feature_1,
                num_filters: $num_filters,
                filter_size: [1, 1],
                nonlinearity: !!python/name:lasagne.nonlinearities.identity ,
                name: 'combined_conv_2',
            },
            &combined_conv_2 !obj:lasagne.layers.Conv2DLayer {
                incoming: *filt_conv_2,
                num_filters: $num_filters,
                filter_size: [$filter_time_length, 1],
                nonlinearity: $later_nonlin ,
                name: 'combined_conv_2',
            },
            &batch_norm_2 !obj:braindevel.veganlasagne.batch_norm.BatchNormLayer {
                incoming: *combined_conv_2,
                epsilon: 1e-4,
                alpha: $batch_norm_alpha,
            },
            &pool_2 !obj:braindevel.veganlasagne.pool.$pool_layers {
                    incoming: *batch_norm_2,
                    pool_size: [$pool_time_length,1],
                    stride: [1,1],
                    mode: $pool_mode,
            },
            &reshape_pool_2 !obj:braindevel.veganlasagne.layers.StrideReshapeLayer {
                    incoming: *pool_2,
                    n_stride: $pool_time_stride,
            },
            &log_2 !obj:lasagne.layers.NonlinearityLayer {
                    incoming: *reshape_pool_2,
                    nonlinearity: $later_pool_nonlin ,
            },
            &drop_feature_2 !obj:lasagne.layers.DropoutLayer {
                incoming: *log_2,
                p: 0.5,
            },
            &filt_conv_3 !obj:lasagne.layers.Conv2DLayer {
                incoming: *drop_feature_2,
                num_filters: $num_filters,
                filter_size: [1, 1],
                nonlinearity: !!python/name:lasagne.nonlinearities.identity ,
                name: 'combined_conv_3',
            },
            &combined_conv_3 !obj:lasagne.layers.Conv2DLayer {
                incoming: *filt_conv_3,
                num_filters: $num_filters,
                filter_size: [$filter_time_length, 1],
                nonlinearity: $later_nonlin ,
                name: 'combined_conv_3',
            },
            &batch_norm_3 !obj:braindevel.veganlasagne.batch_norm.BatchNormLayer {
                incoming: *combined_conv_3,
                epsilon: 1e-4,
                alpha: $batch_norm_alpha,
            },
            &pool_3 !obj:braindevel.veganlasagne.pool.$pool_layers {
                    incoming: *batch_norm_3,
                    pool_size: [$pool_time_length,1],
                    stride: [1,1],
                    mode: $pool_mode,
            },
            &reshape_pool_3 !obj:braindevel.veganlasagne.layers.StrideReshapeLayer {
                    incoming: *pool_3,
                    n_stride: $pool_time_stride,
            },
            &log_3 !obj:lasagne.layers.NonlinearityLayer {
                    incoming: *reshape_pool_3,
                    nonlinearity: $later_pool_nonlin ,
            },
            &drop_feature_3 !obj:lasagne.layers.DropoutLayer {
                incoming: *log_3,
                p: 0.5,
            },
            &filt_conv_4 !obj:lasagne.layers.Conv2DLayer {
                incoming: *drop_feature_3,
                num_filters: $num_filters,
                filter_size: [1, 1],
                nonlinearity: !!python/name:lasagne.nonlinearities.identity ,
                name: 'combined_conv_4',
            },
            &combined_conv_4 !obj:lasagne.layers.Conv2DLayer {
                incoming: *filt_conv_4,
                num_filters: $num_filters,
                filter_size: [$filter_time_length, 1],
                nonlinearity: $later_nonlin ,
                name: 'combined_conv_4',
            },
            &batch_norm_4 !obj:braindevel.veganlasagne.batch_norm.BatchNormLayer {
                incoming: *combined_conv_4,
                epsilon: 1e-4,
                alpha: $batch_norm_alpha,
            },
            &pool_4 !obj:braindevel.veganlasagne.pool.$pool_layers {
                    incoming: *batch_norm_4,
                    pool_size: [$pool_time_length,1],
                    stride: [1,1],
                    mode: $pool_mode,
            },
            &reshape_pool_4 !obj:braindevel.veganlasagne.layers.StrideReshapeLayer {
                    incoming: *pool_4,
                    n_stride: $pool_time_stride,
            },
            &log_4 !obj:lasagne.layers.NonlinearityLayer {
                    incoming: *reshape_pool_4,
                    nonlinearity: $later_pool_nonlin ,
            },
            &drop_feature_4 !obj:lasagne.layers.DropoutLayer {
                incoming: *log_4,
                p: 0.5,
            },
            &filt_conv_5 !obj:lasagne.layers.Conv2DLayer {
                incoming: *drop_feature_4,
                num_filters: $num_filters,
                filter_size: [1, 1],
                nonlinearity: !!python/name:lasagne.nonlinearities.identity ,
                name: 'combined_conv_5',
            },
            &combined_conv_5 !obj:lasagne.layers.Conv2DLayer {
                incoming: *filt_conv_5,
                num_filters: $num_filters,
                filter_size: [$filter_time_length, 1],
                nonlinearity: $later_nonlin ,
                name: 'combined_conv_5',
            },
            &batch_norm_5 !obj:braindevel.veganlasagne.batch_norm.BatchNormLayer {
                incoming: *combined_conv_5,
                epsilon: 1e-4,
                alpha: $batch_norm_alpha,
            },
            &pool_5 !obj:braindevel.veganlasagne.pool.$pool_layers {
                    incoming: *batch_norm_5,
                    pool_size: [$pool_time_length,1],
                    stride: [1,1],
                    mode: $pool_mode,
            },
            &reshape_pool_5 !obj:braindevel.veganlasagne.layers.StrideReshapeLayer {
                    incoming: *pool_5,
                    n_stride: $pool_time_stride,
            },
            &log_5 !obj:lasagne.layers.NonlinearityLayer {
                    incoming: *reshape_pool_5,
                    nonlinearity: $later_pool_nonlin ,
            },
            &drop_feature_5 !obj:lasagne.layers.DropoutLayer {
                incoming: *log_5,
                p: 0.5,
            },
            &final_dense !obj:lasagne.layers.Conv2DLayer {
                incoming: *drop_feature_5,
                num_filters: 6,
                filter_size: [$final_dense_length, 1],
                nonlinearity: !!python/name:lasagne.nonlinearities.identity ,
                name: 'final_dense',
            },
            &final_reshape !obj:braindevel.veganlasagne.layers.FinalReshapeLayer {
                    incoming: *final_dense,
            },
            &final_sigmoid !obj:lasagne.layers.NonlinearityLayer {
                    incoming: *final_reshape,
                    nonlinearity: !!python/name:lasagne.nonlinearities.sigmoid ,
            },
        ],
        raw_layer_names_to_norms: {
            combined_conv_1: $conv_norm,
            combined_conv_2: $conv_norm,
            combined_conv_3: $conv_norm,
            combined_conv_4: $conv_norm,
            combined_conv_5: $conv_norm,
            final_dense: $final_norm,
        },
        square: !!python/name:theano.tensor.sqr ,
        identity: !!python/name:lasagne.nonlinearities.identity ,
        relu: !!python/name:lasagne.nonlinearities.rectify ,
        leaky_relu: !!python/name:lasagne.nonlinearities.leaky_rectify ,
        safe_log: !!python/name:braindevel.veganlasagne.nonlinearities.safe_log ,
    },
    variants: [[{
        layer_names_to_norms: [$raw_layer_names_to_norms],
        layers: [$cnt_raw_net_deep_batch_norm],
        final_norm: [0.5],
        conv_norm: [2.0],
        batch_norm_alpha: [0.1], #0.01,0.5,0.9 were tested and slihtly worse... no big differences though
    }]]
}
