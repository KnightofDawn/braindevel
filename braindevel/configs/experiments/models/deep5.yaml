{
    templates: {
        deep_5: !obj:braindevel.veganlasagne.layer_modifiers.$layer_modifier {
        layers: !obj:braindevel.models.deep5.Deep5Net {
            in_chans: $n_chans, 
            input_time_length: $input_time_length, 
            drop_in_prob: $drop_in_prob,
            num_filters_time: $num_filters_time,
            filter_time_length: $filter_time_length,
            num_filters_spat: $num_filters_spat,
            batch_norm_alpha: $batch_norm_alpha,
            first_nonlin: $first_nonlin,
            pool_time_length: $pool_time_length,
            first_pool_mode: $first_pool_mode,
            pool_time_stride: $pool_time_stride,
            first_pool_nonlin: $first_pool_nonlin,
            drop_prob: $drop_prob,
            num_filters_2: $num_filters_2,
            filter_length_2: $filter_length_2,
            later_nonlin: $later_nonlin,
            later_pool_mode: $later_pool_mode,
            later_pool_nonlin: $later_pool_nonlin,
            num_filters_3: $num_filters_3,
            filter_length_3: $filter_length_3,
            num_filters_4: $num_filters_4,
            filter_length_4: $filter_length_4,
            final_dense_length: $final_dense_length,
            n_classes: $n_classes,
            final_nonlin: $final_nonlin,
            double_time_convs: $double_time_convs,
            batch_norm: $batch_norm,
            split_first_layer: $split_first_layer,
        },
        },
        layer_names_to_norms: {
            time_conv: $conv_norm,
            spat_conv: $conv_norm,
            combined_conv_2: $conv_norm,
            combined_conv_3: $conv_norm,
            combined_conv_4: $conv_norm,
            final_dense: $final_norm,
        },
        # in case of no split first layer
        layer_norms_no_spat: {
            time_conv: $conv_norm,
            combined_conv_2: $conv_norm,
            combined_conv_3: $conv_norm,
            combined_conv_4: $conv_norm,
            final_dense: $final_norm,
        },
        square: !!python/name:theano.tensor.sqr ,
        sigmoid: !!python/name:lasagne.nonlinearities.sigmoid ,
        identity: !!python/name:lasagne.nonlinearities.identity ,
        elu: !!python/name:lasagne.nonlinearities.elu ,
        relu: !!python/name:lasagne.nonlinearities.rectify ,
        leaky_relu: !!python/name:lasagne.nonlinearities.leaky_rectify ,
        safe_log: !!python/name:braindevel.veganlasagne.nonlinearities.safe_log ,
        safe_softmax: !!python/name:braindevel.veganlasagne.nonlinearities.safe_softmax ,
    },
    variants: [[{
        n_chans: [in_sensors], # will be replaced by experiment_runner.py
        split_first_layer: [True],
        batch_norm: [True],
        double_time_convs: [False],
        drop_prob: [0.5],
        n_classes: [4],
        layer_names_to_norms: [$layer_names_to_norms],
        layers: [$deep_5],
        final_norm: [0.5],
        conv_norm: [2.0],
       
        first_nonlin: [$elu],
        first_pool_mode: ['max'], # just to prevent errors on square run, reenable
        first_pool_nonlin: [$identity],
        later_nonlin: [$elu],
        later_pool_mode: ['max'], # just to prevent errors on square run, reenable
        later_pool_nonlin: [$identity],
        batch_norm_alpha: [0.1], 
        final_nonlin: [$safe_softmax],
        
        num_filters_time: [40],
        num_filters_spat: [40],
        num_filters_2: [60],
        num_filters_3: [90],
        num_filters_4: [135],
        
        filter_time_length: [10],
        filter_length_2: [10],
        filter_length_3: [10],
        filter_length_4: [10],
        pool_time_length: [3],
        pool_time_stride: [3],
    }]]
}
